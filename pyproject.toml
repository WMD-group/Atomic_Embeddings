[build-system]
# Minimum requirements for the build system to execute.
requires = ["setuptools>=65.0.0"]  # PEP 508 specifications.
build-backend = "setuptools.build_meta"

[project]
name = "ElementEmbeddings"
version = "0.6.1"
description = "Element Embeddings"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Anthony O. Onwuli", email = "anthony.onwuli16@imperial.ac.uk" }
]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Chemistry",
    "License :: OSI Approved :: MIT License",
]
dependencies = [
    "numpy>=1.23.3,<3",
    "scipy>=1.10.1",
    "pymatgen>2022.9.21",
    "seaborn>=0.13.0",
    "matplotlib>=3.7.1",
    "scikit-learn>=1.3.0",
    "umap-learn>=0.5.3",
    "adjustText>=0.8",
    "openTSNE>=1.0.0",
    "typing-extensions",
    "llvmlite>=0.40",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "black",
    "isort",
    "pytest",
    "pytest-subtests",
    "nbqa",
    "flake8",
    "pyupgrade",
    "autopep8",
    "pytest-cov",
    "pytest-mpl",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocstrings-python",
    "mike",
    "mkdocs-jupyter",
]

[tool.semantic_release]
version_variable = "setup.py:__version__"
version_source = "tag"

[tool.ruff]
target-version = "py310"
line-length = 120
force-exclude = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
        # Rule families
    "ANN",  # flake8-annotations (not ready, require types for ALL args)
    "ARG",  # Check for unused function arguments
    "BLE",  # General catch of Exception
    "C90",  # Check for functions with a high McCabe complexity
    "COM",  # flake8-commas (conflict with line wrapper)
    "CPY",  # Missing copyright notice at top of file (need preview mode)
    "EM",   # Format nice error messages
    "ERA",  # Check for commented-out code
    "FIX",  # Check for FIXME, TODO and other developer notes
    "FURB", # refurb (need preview mode, too many preview errors)
    "G",    # Validate logging format strings
    "INP",  # Ban PEP-420 implicit namespace packages
    "N",    # PEP8-naming (many var/arg names are intended)
    "PTH",  # Prefer pathlib over os.path
    "SLF",  # Access "private" class members
    "T20",  # Check for print/pprint
    "TD",   # TODO tags related

    # Single rules
    "B023",    # Function definition does not bind loop variable
    "B028",    # No explicit stacklevel keyword argument found
    "B904",    # Within an except clause, raise exceptions with ...
    "C408",    # unnecessary-collection-call
    "D105",    # Missing docstring in magic method
    "D205",    # One blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "E501",    # Line too long
    "E722",    # Do not use bare `except` TODO fix this
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function
    "ISC001",
    "NPY201",  # TODO: enable after migration to NumPy 2.0
    "PD901",   # pandas-df-variable-name
    "PERF203", # Use of try-except in for/while loop
    "PERF401", # Replace "for" loops with list comprehension
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic-value-comparison TODO fix these
    "PLW2901", # Outer for loop variable overwritten by inner assignment target
    "PLW0603", # Using the global statement to update `_el_ox_states_wiki` is discouraged TODO fix these
    "PT009",   # Use a regular `assert` instead of unittest-style `assertAlmostEqual`
    "PT011",   # `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception TODO fix these
    "PT013",   # Incorrect import of pytest
    "RET505",  # Unnecessary `else` after `return` statement
    "S101",    # Use of "assert"
    "S110",    # Log for try-except-pass
    "S112",    # Log for try-except-continue
    "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
    "S311",    # Use random module for cryptographic purposes
    "S314",    # Replace xml with defusedxml to avoid XML attacks
    "S603",    # Check source for use of "subprocess" call
    "S607",    # Start process with relative path
    "S608",    # Possible SQL injection vector through string-based query construction
    "SIM105",  # Use contextlib.suppress() instead of try-except-pass
    "TRY002",  # Create your own exception TODO fix these
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY300",  # Check for return statements in try blocks
    "TRY301",  # Check for raise statements within try blocks
    "E741",    # Ambiguous variable
]
exclude = ["Publications/*"]
pydocstyle.convention = "google"
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.format]
docstring-code-format = true


[tool.ruff.lint.per-file-ignores]
"src/elementembeddings/tests/*" = ["D"]

[tool.pyright]
typeCheckingMode = "off"
reportPossiblyUnboundVariable = true
reportUnboundVariable = true

[tool.codespell]
skip = "*.csv,*/site/*,Publication/element_similarity/**,*periodic-table*.json"
check-filenames = true
ignore-words-list = [
            "H",
            "He",
            "Li",
            "Be",
            "B",
            "C",
            "N",
            "O",
            "F",
            "Ne",
            "Na",
            "Mg",
            "Al",
            "Si",
            "P",
            "S",
            "Cl",
            "Ar",
            "K",
            "Ca",
            "Sc",
            "Ti",
            "V",
            "Cr",
            "Mn",
            "Fe",
            "Co",
            "Ni",
            "Cu",
            "Zn",
            "Ga",
            "Ge",
            "As",
            "Se",
            "Br",
            "Kr",
            "Rb",
            "Sr",
            "Y",
            "Zr",
            "Nb",
            "Mo",
            "Tc",
            "Ru",
            "Rh",
            "Pd",
            "Ag",
            "Cd",
            "In",
            "Sn",
            "Sb",
            "Te",
            "I",
            "Xe",
            "Cs",
            "Ba",
            "La",
            "Ce",
            "Pr",
            "Nd",
            "Pm",
            "Sm",
            "Eu",
            "Gd",
            "Tb",
            "Dy",
            "Ho",
            "Er",
            "Tm",
            "Yb",
            "Lu",
            "Hf",
            "Ta",
            "W",
            "Re",
            "Os",
            "Ir",
            "Pt",
            "Au",
            "Hg",
            "Tl",
            "Pb",
            "Bi",
            "Po",
            "At",
            "Rn",
            "Fr",
            "Ra",
            "Ac",
            "Th",
            "Pa",
            "U",
            "Np",
            "Pu",
            "Am",
            "Cm",
            "Bk",
        ]
