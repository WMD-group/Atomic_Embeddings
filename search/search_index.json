{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to AtomicEmbeddings This site contains the project documentation for the AtomicEmbeddings package which provides tools and examples of analysing and visualising elemental representation data. Table of Contents The documentation consists of the following six parts: About Getting Started Python API Tutorials Reference Contributing Project Overview Analyse elemental representation data. Modules exported by this package: AtomicEmbeddings : Provides the Atomic_Embeddings class which handles elemental representations.","title":"Home"},{"location":"#welcome-to-atomicembeddings","text":"This site contains the project documentation for the AtomicEmbeddings package which provides tools and examples of analysing and visualising elemental representation data.","title":"Welcome to AtomicEmbeddings"},{"location":"#table-of-contents","text":"The documentation consists of the following six parts: About Getting Started Python API Tutorials Reference Contributing","title":"Table of Contents"},{"location":"#project-overview","text":"Analyse elemental representation data. Modules exported by this package: AtomicEmbeddings : Provides the Atomic_Embeddings class which handles elemental representations.","title":"Project Overview"},{"location":"about/","text":"About the AtomicEmbeddings package The Atomic Embeddings package provides high-level tools for analysing elemental embeddings data. This primarily involves visualising the correlation between embedding schemes using different statistical measures. Motivation Machine learning approaches for materials informatics have become increasingly widespread. Some of these involve the use of deep learning techniques where the representation of the elements is learned rather than specified by the user of the model. While an important goal of machine learning training is to minimise the chosen error function to make more accurate predictions, it is also important for us material scientists to be able to interpret these models. As such, we aim to evaluate and compare different atomic embedding schemes in a consistent framework.","title":"About"},{"location":"about/#about-the-atomicembeddings-package","text":"The Atomic Embeddings package provides high-level tools for analysing elemental embeddings data. This primarily involves visualising the correlation between embedding schemes using different statistical measures.","title":"About the AtomicEmbeddings package"},{"location":"about/#motivation","text":"Machine learning approaches for materials informatics have become increasingly widespread. Some of these involve the use of deep learning techniques where the representation of the elements is learned rather than specified by the user of the model. While an important goal of machine learning training is to minimise the chosen error function to make more accurate predictions, it is also important for us material scientists to be able to interpret these models. As such, we aim to evaluate and compare different atomic embedding schemes in a consistent framework.","title":"Motivation"},{"location":"contribution/","text":"Bug reports, feature requests and questions Please use the Issue Tracker to report bugs or request features in the first instance. Contributions are always welcome. Code contributions We are always looking for ways to make AtomicEmbeddings better and a more useful to a wider community. For making contributions, use the \"Fork and Pull\" workflow to make contributions and stick as closely as possible to the following: Code style should comply with PEP8 where possible. Google's house style is also helpful, including a good model for docstrings. Please use comments liberally when adding nontrivial features, and take the chance to clean up other people's code while looking at it. Add tests wherever possible, and use the test suite to check if you broke anything.","title":"Contributing"},{"location":"contribution/#bug-reports-feature-requests-and-questions","text":"Please use the Issue Tracker to report bugs or request features in the first instance. Contributions are always welcome.","title":"Bug reports, feature requests and questions"},{"location":"contribution/#code-contributions","text":"We are always looking for ways to make AtomicEmbeddings better and a more useful to a wider community. For making contributions, use the \"Fork and Pull\" workflow to make contributions and stick as closely as possible to the following: Code style should comply with PEP8 where possible. Google's house style is also helpful, including a good model for docstrings. Please use comments liberally when adding nontrivial features, and take the chance to clean up other people's code while looking at it. Add tests wherever possible, and use the test suite to check if you broke anything.","title":"Code contributions"},{"location":"installation/","text":"The latest version of the package can be installed using: pip install git+git://github.com/WMD-group/Atomic_Embeddings.git Developer's installation (optional) For development work, AtomicEmbeddings can eb installed from a copy of the source repository ; this is preferred if using experimental code branches. To clone the project from Github and make a local installation: git clone https://github.com/WMD-group/Atomic_Embeddings.git cd Atomic_Embeddings pip install --user -e . With -e , pip will create links to the source folder so that the changes to the code will be reflected on the PATH.","title":"Getting Started"},{"location":"installation/#developers-installation-optional","text":"For development work, AtomicEmbeddings can eb installed from a copy of the source repository ; this is preferred if using experimental code branches. To clone the project from Github and make a local installation: git clone https://github.com/WMD-group/Atomic_Embeddings.git cd Atomic_Embeddings pip install --user -e . With -e , pip will create links to the source folder so that the changes to the code will be reflected on the PATH.","title":"Developer's installation (optional)"},{"location":"python_api/","text":"Atomic Embeddings Python package The core module of the AtomicEmbeddings contains the Atomic_Embeddings class which is used This part of the project documentation provides the python API for the AtomicEmbeddings package. Atomic_Embeddings Represents an elemental representation, which is essentially a dictionary of {element: vector} pairs. Works like a standard python dictionary. Adds a few convenience methods related to elemental representations. Source code in AtomicEmbeddings/AtomicEmbeddings.pyclass Atomic_Embeddings : \"\"\" Represents an elemental representation, which is essentially a dictionary of {element: vector} pairs. Works like a standard python dictionary. Adds a few convenience methods related to elemental representations. \"\"\" def __init__ ( self , embeddings ): self . embeddings = embeddings # Grab a random value from the embedding vector _rand_embed = random . choice ( list ( self . embeddings . values ())) # Convert embeddings to numpy array if not already a numpy array if not isinstance ( _rand_embed , np . ndarray ): self . embeddings = { ele : np . array ( self . embeddings [ ele ]) for ele in self . embeddings } # Determines if the embedding vector has a length attribute # (i.e. is not a scalar int or float) # If the 'vector' is a scalar/float, the representation is linear (dim=1) if hasattr ( _rand_embed , \"__len__\" ) and ( not isinstance ( _rand_embed , str )): self . dim = len ( random . choice ( list ( self . embeddings . values ()))) else : self . dim = 1 @staticmethod def from_json ( embedding_json : Optional [ str ] = None ): \"\"\"Creates an instance of the `Atomic_Embeddings` class from a default embedding file. The default embeddings are in the table below: | **Name** | **str_name** | |-------------------------|--------------| | Magpie | magpie | | Magpie (scaled) | magpie_sc | | Mat2Vec | mat2vec | | Matscholar | matscholar | | Megnet (16 dimensions) | megnet16 | | Modified pettifor scale | mod_petti | | Oliynyk | oliynyk | | Oliynyk (scaled) | oliynyk_sc | | Random (200 dimensions) | random_200 | | SkipAtom | skipatom | Args: embedding_json (str): JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. Returns: Atomic_Embedding :class:`Atomic_Embeddings` instance.\"\"\" _cbfv_files = { \"magpie\" : \"magpie.json\" , \"magpie_sc\" : \"magpie_sc.json\" , \"mat2vec\" : \"mat2vec.json\" , \"matscholar\" : \"matscholar-embedding.json\" , \"megnet16\" : \"megnet16.json\" , \"mod_petti\" : \"mod_petti.json\" , \"oliynyk\" : \"oliynyk.json\" , \"oliynyk_sc\" : \"oliynyk_sc.json\" , \"random_200\" : \"random_200.csv\" , \"skipatom\" : \"skipatom_20201009_induced.csv\" , } _cbfv_names = list ( _cbfv_files . keys ()) _cbfv_names_others = [ i for i in _cbfv_names if i not in [ \"skipatom\" , \"random_200\" , \"megnet16\" ] ] # Get the embeddings if embedding_json in _cbfv_files : if embedding_json == \"skipatom\" or embedding_json == \"random_200\" : _csv = path . join ( data_directory , _cbfv_files [ embedding_json ]) df = pd . read_csv ( _csv ) # Convert df to a dictionary of (ele:embeddings) pairs elements = list ( df [ \"element\" ]) df . drop ([ \"element\" ], axis = 1 , inplace = True ) embeds_array = df . to_numpy () embedding_data = { elements [ i ]: embeds_array [ i ] for i in range ( len ( embeds_array )) } elif embedding_json == \"megnet16\" : megnet16_json = path . join ( data_directory , _cbfv_files [ \"megnet16\" ]) with open ( megnet16_json , \"r\" ) as f : embedding_data = json . load ( f ) # Remove 'Null' key from megnet embedding del embedding_data [ \"Null\" ] elif embedding_json in _cbfv_names_others : _json = path . join ( data_directory , _cbfv_files [ embedding_json ]) with open ( _json , \"r\" ) as f : embedding_data = json . load ( f ) # Load a json file from a file specified in the input else : with open ( embedding_json , \"r\" ) as f : embedding_data = json . load ( f ) else : raise ( ValueError ( f \" { embedding_json } not in the data directory or not in directory.\" ) ) return Atomic_Embeddings ( embedding_data ) @property def element_list ( self ): \"\"\"Returns the elements of the atomic embedding.\"\"\" return list ( self . embeddings . keys ()) @property def element_groups_dict ( self ): \"\"\"Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'}\"\"\" with open ( path . join ( data_directory , \"element_data/element_group.json\" )) as f : _dict = json . load ( f ) return { i : _dict [ i ] for i in self . element_list } def create_pairs ( self ): \"\"\"Creates all possible pairs of elements\"\"\" ele_list = self . element_list ele_pairs = combinations_with_replacement ( ele_list , 2 ) return ele_pairs def create_correlation_df ( self ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics\"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : pearson = pearsonr ( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) dist = norm ( self . embeddings [ ele1 ] - self . embeddings [ ele2 ]) recip_dist = dist **- 1 table . append (( ele1 , ele2 , pearson [ 0 ], dist , recip_dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , pearson [ 0 ], dist , recip_dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , \"pearson_corr\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , ], ) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [ [ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , \"pearson_corr\" , ] ] return corr_df def compute_distance_metric ( self , ele1 , ele2 , metric = \"euclidean\" ): \"\"\"Computes distance metric between two vectors. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: ele1 (str): element symbol ele2 (str): element symbol metric (str): name of a distance metric Returns: distance (float): distance between embedding vectors \"\"\" # Define the allowable metrics scikit_metrics = [ \"euclidean\" , \"manhattan\" , \"chebyshev\" ] scipy_metrics = { \"wasserstein\" : wasserstein_distance , \"energy\" : energy_distance } valid_metrics = scikit_metrics + list ( scipy_metrics . keys ()) # Validate if the elements are within the embedding vector if ele1 not in self . element_list : print ( \"ele1 is not an element included within the atomic embeddings\" ) raise ValueError if ele2 not in self . element_list : print ( \"ele2 is not an element included within the atomic embeddings\" ) raise ValueError # Compute the distance measure if metric in scikit_metrics : distance = DistanceMetric . get_metric ( metric ) return distance . pairwise ( self . embeddings [ ele1 ] . reshape ( 1 , - 1 ), self . embeddings [ ele2 ] . reshape ( 1 , - 1 ), )[ 0 ][ 0 ] elif metric in scipy_metrics . keys (): return scipy_metrics [ metric ]( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) else : print ( f \"Invalid distance metric. Use one of the following metrics: { valid_metrics } \" ) raise ValueError def create_pearson_pivot_table ( self ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics\"\"\" corr_df = self . create_correlation_df () pearson_pivot = corr_df . pivot_table ( values = \"pearson_corr\" , index = \"mend_1\" , columns = \"mend_2\" ) return pearson_pivot def create_distance_correlation_df ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: metric (str): A distance metric Returns: df (pandas.DataFrame): A dataframe with columns [\"ele_1\", \"ele_2\", metric] \"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : dist = self . compute_distance_metric ( ele1 , ele2 , metric = metric ) table . append (( ele1 , ele2 , dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , metric ]) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [[ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , metric ]] return corr_df def create_distance_pivot_table ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Args: metric (str): A distance metric Returns: distance_pivot (pandas.DataFrame): A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. \"\"\" corr_df = self . create_distance_correlation_df ( metric = metric ) distance_pivot = corr_df . pivot_table ( values = metric , index = \"mend_1\" , columns = \"mend_2\" ) return distance_pivot def plot_pearson_correlation ( self , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pearson correlation values for the elemental representation. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object **kwargs: Other keyword arguments to be passed to sns.heatmap Returns: ax (matplotlib Axes): An Axes object with the heatmap \"\"\" pearson_pivot = self . create_pearson_pivot_table () plt . figure ( figsize = figsize ) ax = sns . heatmap ( pearson_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax def plot_distance_correlation ( self , metric = \"euclidean\" , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pairwise distance metrics for the elemental representation. Args: metric (str): A valid distance metric figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object Returns: ax (matplotlib.axes.Axes): An Axes object with the heatmap \"\"\" distance_pivot = self . create_distance_pivot_table ( metric = metric ) plt . figure ( figsize = figsize ) ax = sns . heatmap ( distance_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax def plot_PCA_2D ( self , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs ): \"\"\"A function to plot a PCA plot of the atomic embedding. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) fig = plt . figure ( figsize = figsize ) plt . cla () # clear current axes pca = decomposition . PCA ( n_components = 2 ) # project to 2 dimensions pca . fit ( embeddings_array ) X = pca . transform ( embeddings_array ) pca_dim1 = X [:, 0 ] pca_dim2 = X [:, 1 ] # Create a dataframe to store the dimensions, labels and group info for the PCA pca_df = pd . DataFrame ( { \"pca_dim1\" : pca_dim1 , \"pca_dim2\" : pca_dim2 , \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) ax = sns . scatterplot ( x = \"pca_dim1\" , y = \"pca_dim2\" , data = pca_df , hue = points_hue , s = points_size , ** kwargs , ) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) for i in range ( len ( X )): plt . text ( x = pca_dim1 [ i ], y = pca_dim2 [ i ], s = element_array [ i ]) return plt def plot_tSNE ( self , n_components = 2 , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs , ): \"\"\"A function to plot a t-SNE plot of the atomic embedding Args: n_components (int): Number of t-SNE components to plot. figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) tsne = TSNE ( n_components ) tsne_result = tsne . fit_transform ( embeddings_array ) # Create a dataframe to store the dimension and the label for t-SNE transformation tsne_df = pd . DataFrame ( { \"tsne_dim1\" : tsne_result [:, 0 ], \"tsne_dim2\" : tsne_result [:, 1 ], \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) # Create the t-SNE plot fig , ax = plt . subplots ( figsize = figsize ) sns . scatterplot ( x = \"tsne_dim1\" , y = \"tsne_dim2\" , data = tsne_df , hue = points_hue , s = points_size , ax = ax , ) # lim = (tsne_result.min()-5, tsne_result.max()+5) # ax.set_xlim(lim) # ax.set_ylim(lim) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) # Label the points for i in range ( tsne_df . shape [ 0 ]): plt . text ( x = tsne_df [ \"tsne_dim1\" ][ i ], y = tsne_df [ \"tsne_dim2\" ][ i ], s = tsne_df [ \"element\" ][ i ], ) return plt compute_distance_metric ( ele1 , ele2 , metric = 'euclidean' ) Computes distance metric between two vectors. Allowed metrics: euclidean manhattan chebyshev wasserstein energy Parameters: Name Type Description Default ele1 str element symbol required ele2 str element symbol required metric str name of a distance metric 'euclidean' Returns: Name Type Description distance float distance between embedding vectors Source code in AtomicEmbeddings/AtomicEmbeddings.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def compute_distance_metric ( self , ele1 , ele2 , metric = \"euclidean\" ): \"\"\"Computes distance metric between two vectors. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: ele1 (str): element symbol ele2 (str): element symbol metric (str): name of a distance metric Returns: distance (float): distance between embedding vectors \"\"\" # Define the allowable metrics scikit_metrics = [ \"euclidean\" , \"manhattan\" , \"chebyshev\" ] scipy_metrics = { \"wasserstein\" : wasserstein_distance , \"energy\" : energy_distance } valid_metrics = scikit_metrics + list ( scipy_metrics . keys ()) # Validate if the elements are within the embedding vector if ele1 not in self . element_list : print ( \"ele1 is not an element included within the atomic embeddings\" ) raise ValueError if ele2 not in self . element_list : print ( \"ele2 is not an element included within the atomic embeddings\" ) raise ValueError # Compute the distance measure if metric in scikit_metrics : distance = DistanceMetric . get_metric ( metric ) return distance . pairwise ( self . embeddings [ ele1 ] . reshape ( 1 , - 1 ), self . embeddings [ ele2 ] . reshape ( 1 , - 1 ), )[ 0 ][ 0 ] elif metric in scipy_metrics . keys (): return scipy_metrics [ metric ]( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) else : print ( f \"Invalid distance metric. Use one of the following metrics: { valid_metrics } \" ) raise ValueError create_correlation_df () Returns a pandas.DataFrame object with columns of the elements and correlation metrics Source code in AtomicEmbeddings/AtomicEmbeddings.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 def create_correlation_df ( self ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics\"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : pearson = pearsonr ( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) dist = norm ( self . embeddings [ ele1 ] - self . embeddings [ ele2 ]) recip_dist = dist **- 1 table . append (( ele1 , ele2 , pearson [ 0 ], dist , recip_dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , pearson [ 0 ], dist , recip_dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , \"pearson_corr\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , ], ) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [ [ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , \"pearson_corr\" , ] ] return corr_df create_distance_correlation_df ( metric = 'euclidean' ) Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: euclidean manhattan chebyshev wasserstein energy Parameters: Name Type Description Default metric str A distance metric 'euclidean' Returns: Name Type Description df pandas . DataFrame A dataframe with columns [\"ele_1\", \"ele_2\", metric] Source code in AtomicEmbeddings/AtomicEmbeddings.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def create_distance_correlation_df ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: metric (str): A distance metric Returns: df (pandas.DataFrame): A dataframe with columns [\"ele_1\", \"ele_2\", metric] \"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : dist = self . compute_distance_metric ( ele1 , ele2 , metric = metric ) table . append (( ele1 , ele2 , dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , metric ]) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [[ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , metric ]] return corr_df create_distance_pivot_table ( metric = 'euclidean' ) Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Parameters: Name Type Description Default metric str A distance metric 'euclidean' Returns: Name Type Description distance_pivot pandas . DataFrame A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. Source code in AtomicEmbeddings/AtomicEmbeddings.py 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def create_distance_pivot_table ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Args: metric (str): A distance metric Returns: distance_pivot (pandas.DataFrame): A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. \"\"\" corr_df = self . create_distance_correlation_df ( metric = metric ) distance_pivot = corr_df . pivot_table ( values = metric , index = \"mend_1\" , columns = \"mend_2\" ) return distance_pivot create_pairs () Creates all possible pairs of elements Source code in AtomicEmbeddings/AtomicEmbeddings.py 154 155 156 157 158 def create_pairs ( self ): \"\"\"Creates all possible pairs of elements\"\"\" ele_list = self . element_list ele_pairs = combinations_with_replacement ( ele_list , 2 ) return ele_pairs create_pearson_pivot_table () Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics Source code in AtomicEmbeddings/AtomicEmbeddings.py 258 259 260 261 262 263 264 265 def create_pearson_pivot_table ( self ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics\"\"\" corr_df = self . create_correlation_df () pearson_pivot = corr_df . pivot_table ( values = \"pearson_corr\" , index = \"mend_1\" , columns = \"mend_2\" ) return pearson_pivot element_groups_dict () property Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'} Source code in AtomicEmbeddings/AtomicEmbeddings.py 146 147 148 149 150 151 152 @property def element_groups_dict ( self ): \"\"\"Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'}\"\"\" with open ( path . join ( data_directory , \"element_data/element_group.json\" )) as f : _dict = json . load ( f ) return { i : _dict [ i ] for i in self . element_list } element_list () property Returns the elements of the atomic embedding. Source code in AtomicEmbeddings/AtomicEmbeddings.py 141 142 143 144 @property def element_list ( self ): \"\"\"Returns the elements of the atomic embedding.\"\"\" return list ( self . embeddings . keys ()) from_json ( embedding_json = None ) staticmethod Creates an instance of the Atomic_Embeddings class from a default embedding file. The default embeddings are in the table below: Name str_name Magpie magpie Magpie (scaled) magpie_sc Mat2Vec mat2vec Matscholar matscholar Megnet (16 dimensions) megnet16 Modified pettifor scale mod_petti Oliynyk oliynyk Oliynyk (scaled) oliynyk_sc Random (200 dimensions) random_200 SkipAtom skipatom Parameters: Name Type Description Default embedding_json str JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. None Returns: Name Type Description Atomic_Embedding class: Atomic_Embeddings instance. Source code in AtomicEmbeddings/AtomicEmbeddings.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 @staticmethod def from_json ( embedding_json : Optional [ str ] = None ): \"\"\"Creates an instance of the `Atomic_Embeddings` class from a default embedding file. The default embeddings are in the table below: | **Name** | **str_name** | |-------------------------|--------------| | Magpie | magpie | | Magpie (scaled) | magpie_sc | | Mat2Vec | mat2vec | | Matscholar | matscholar | | Megnet (16 dimensions) | megnet16 | | Modified pettifor scale | mod_petti | | Oliynyk | oliynyk | | Oliynyk (scaled) | oliynyk_sc | | Random (200 dimensions) | random_200 | | SkipAtom | skipatom | Args: embedding_json (str): JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. Returns: Atomic_Embedding :class:`Atomic_Embeddings` instance.\"\"\" _cbfv_files = { \"magpie\" : \"magpie.json\" , \"magpie_sc\" : \"magpie_sc.json\" , \"mat2vec\" : \"mat2vec.json\" , \"matscholar\" : \"matscholar-embedding.json\" , \"megnet16\" : \"megnet16.json\" , \"mod_petti\" : \"mod_petti.json\" , \"oliynyk\" : \"oliynyk.json\" , \"oliynyk_sc\" : \"oliynyk_sc.json\" , \"random_200\" : \"random_200.csv\" , \"skipatom\" : \"skipatom_20201009_induced.csv\" , } _cbfv_names = list ( _cbfv_files . keys ()) _cbfv_names_others = [ i for i in _cbfv_names if i not in [ \"skipatom\" , \"random_200\" , \"megnet16\" ] ] # Get the embeddings if embedding_json in _cbfv_files : if embedding_json == \"skipatom\" or embedding_json == \"random_200\" : _csv = path . join ( data_directory , _cbfv_files [ embedding_json ]) df = pd . read_csv ( _csv ) # Convert df to a dictionary of (ele:embeddings) pairs elements = list ( df [ \"element\" ]) df . drop ([ \"element\" ], axis = 1 , inplace = True ) embeds_array = df . to_numpy () embedding_data = { elements [ i ]: embeds_array [ i ] for i in range ( len ( embeds_array )) } elif embedding_json == \"megnet16\" : megnet16_json = path . join ( data_directory , _cbfv_files [ \"megnet16\" ]) with open ( megnet16_json , \"r\" ) as f : embedding_data = json . load ( f ) # Remove 'Null' key from megnet embedding del embedding_data [ \"Null\" ] elif embedding_json in _cbfv_names_others : _json = path . join ( data_directory , _cbfv_files [ embedding_json ]) with open ( _json , \"r\" ) as f : embedding_data = json . load ( f ) # Load a json file from a file specified in the input else : with open ( embedding_json , \"r\" ) as f : embedding_data = json . load ( f ) else : raise ( ValueError ( f \" { embedding_json } not in the data directory or not in directory.\" ) ) return Atomic_Embeddings ( embedding_data ) plot_PCA_2D ( figsize = ( 16 , 12 ), points_hue = 'group' , points_size = 200 , ** kwargs ) A function to plot a PCA plot of the atomic embedding. Parameters: Name Type Description Default figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (16, 12) points_size float The marker size 200 Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the PCA plot Source code in AtomicEmbeddings/AtomicEmbeddings.py 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def plot_PCA_2D ( self , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs ): \"\"\"A function to plot a PCA plot of the atomic embedding. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) fig = plt . figure ( figsize = figsize ) plt . cla () # clear current axes pca = decomposition . PCA ( n_components = 2 ) # project to 2 dimensions pca . fit ( embeddings_array ) X = pca . transform ( embeddings_array ) pca_dim1 = X [:, 0 ] pca_dim2 = X [:, 1 ] # Create a dataframe to store the dimensions, labels and group info for the PCA pca_df = pd . DataFrame ( { \"pca_dim1\" : pca_dim1 , \"pca_dim2\" : pca_dim2 , \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) ax = sns . scatterplot ( x = \"pca_dim1\" , y = \"pca_dim2\" , data = pca_df , hue = points_hue , s = points_size , ** kwargs , ) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) for i in range ( len ( X )): plt . text ( x = pca_dim1 [ i ], y = pca_dim2 [ i ], s = element_array [ i ]) return plt plot_distance_correlation ( metric = 'euclidean' , figsize = ( 24 , 24 ), ** kwargs ) Plots the heatmap of the pairwise distance metrics for the elemental representation. Parameters: Name Type Description Default metric str A valid distance metric 'euclidean' figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (24, 24) Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the heatmap Source code in AtomicEmbeddings/AtomicEmbeddings.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 def plot_distance_correlation ( self , metric = \"euclidean\" , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pairwise distance metrics for the elemental representation. Args: metric (str): A valid distance metric figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object Returns: ax (matplotlib.axes.Axes): An Axes object with the heatmap \"\"\" distance_pivot = self . create_distance_pivot_table ( metric = metric ) plt . figure ( figsize = figsize ) ax = sns . heatmap ( distance_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax plot_pearson_correlation ( figsize = ( 24 , 24 ), ** kwargs ) Plots the heatmap of the pearson correlation values for the elemental representation. Parameters: Name Type Description Default figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (24, 24) **kwargs Other keyword arguments to be passed to sns.heatmap {} Returns: Name Type Description ax matplotlib Axes An Axes object with the heatmap Source code in AtomicEmbeddings/AtomicEmbeddings.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 def plot_pearson_correlation ( self , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pearson correlation values for the elemental representation. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object **kwargs: Other keyword arguments to be passed to sns.heatmap Returns: ax (matplotlib Axes): An Axes object with the heatmap \"\"\" pearson_pivot = self . create_pearson_pivot_table () plt . figure ( figsize = figsize ) ax = sns . heatmap ( pearson_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax plot_tSNE ( n_components = 2 , figsize = ( 16 , 12 ), points_hue = 'group' , points_size = 200 , ** kwargs ) A function to plot a t-SNE plot of the atomic embedding Parameters: Name Type Description Default n_components int Number of t-SNE components to plot. 2 figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (16, 12) points_size float The marker size 200 Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the PCA plot Source code in AtomicEmbeddings/AtomicEmbeddings.py 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 def plot_tSNE ( self , n_components = 2 , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs , ): \"\"\"A function to plot a t-SNE plot of the atomic embedding Args: n_components (int): Number of t-SNE components to plot. figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) tsne = TSNE ( n_components ) tsne_result = tsne . fit_transform ( embeddings_array ) # Create a dataframe to store the dimension and the label for t-SNE transformation tsne_df = pd . DataFrame ( { \"tsne_dim1\" : tsne_result [:, 0 ], \"tsne_dim2\" : tsne_result [:, 1 ], \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) # Create the t-SNE plot fig , ax = plt . subplots ( figsize = figsize ) sns . scatterplot ( x = \"tsne_dim1\" , y = \"tsne_dim2\" , data = tsne_df , hue = points_hue , s = points_size , ax = ax , ) # lim = (tsne_result.min()-5, tsne_result.max()+5) # ax.set_xlim(lim) # ax.set_ylim(lim) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) # Label the points for i in range ( tsne_df . shape [ 0 ]): plt . text ( x = tsne_df [ \"tsne_dim1\" ][ i ], y = tsne_df [ \"tsne_dim2\" ][ i ], s = tsne_df [ \"element\" ][ i ], ) return plt","title":"Python API"},{"location":"python_api/#atomic-embeddings-python-package","text":"The core module of the AtomicEmbeddings contains the Atomic_Embeddings class which is used This part of the project documentation provides the python API for the AtomicEmbeddings package.","title":"Atomic Embeddings Python package"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings","text":"Represents an elemental representation, which is essentially a dictionary of {element: vector} pairs. Works like a standard python dictionary. Adds a few convenience methods related to elemental representations. Source code in AtomicEmbeddings/AtomicEmbeddings.pyclass Atomic_Embeddings : \"\"\" Represents an elemental representation, which is essentially a dictionary of {element: vector} pairs. Works like a standard python dictionary. Adds a few convenience methods related to elemental representations. \"\"\" def __init__ ( self , embeddings ): self . embeddings = embeddings # Grab a random value from the embedding vector _rand_embed = random . choice ( list ( self . embeddings . values ())) # Convert embeddings to numpy array if not already a numpy array if not isinstance ( _rand_embed , np . ndarray ): self . embeddings = { ele : np . array ( self . embeddings [ ele ]) for ele in self . embeddings } # Determines if the embedding vector has a length attribute # (i.e. is not a scalar int or float) # If the 'vector' is a scalar/float, the representation is linear (dim=1) if hasattr ( _rand_embed , \"__len__\" ) and ( not isinstance ( _rand_embed , str )): self . dim = len ( random . choice ( list ( self . embeddings . values ()))) else : self . dim = 1 @staticmethod def from_json ( embedding_json : Optional [ str ] = None ): \"\"\"Creates an instance of the `Atomic_Embeddings` class from a default embedding file. The default embeddings are in the table below: | **Name** | **str_name** | |-------------------------|--------------| | Magpie | magpie | | Magpie (scaled) | magpie_sc | | Mat2Vec | mat2vec | | Matscholar | matscholar | | Megnet (16 dimensions) | megnet16 | | Modified pettifor scale | mod_petti | | Oliynyk | oliynyk | | Oliynyk (scaled) | oliynyk_sc | | Random (200 dimensions) | random_200 | | SkipAtom | skipatom | Args: embedding_json (str): JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. Returns: Atomic_Embedding :class:`Atomic_Embeddings` instance.\"\"\" _cbfv_files = { \"magpie\" : \"magpie.json\" , \"magpie_sc\" : \"magpie_sc.json\" , \"mat2vec\" : \"mat2vec.json\" , \"matscholar\" : \"matscholar-embedding.json\" , \"megnet16\" : \"megnet16.json\" , \"mod_petti\" : \"mod_petti.json\" , \"oliynyk\" : \"oliynyk.json\" , \"oliynyk_sc\" : \"oliynyk_sc.json\" , \"random_200\" : \"random_200.csv\" , \"skipatom\" : \"skipatom_20201009_induced.csv\" , } _cbfv_names = list ( _cbfv_files . keys ()) _cbfv_names_others = [ i for i in _cbfv_names if i not in [ \"skipatom\" , \"random_200\" , \"megnet16\" ] ] # Get the embeddings if embedding_json in _cbfv_files : if embedding_json == \"skipatom\" or embedding_json == \"random_200\" : _csv = path . join ( data_directory , _cbfv_files [ embedding_json ]) df = pd . read_csv ( _csv ) # Convert df to a dictionary of (ele:embeddings) pairs elements = list ( df [ \"element\" ]) df . drop ([ \"element\" ], axis = 1 , inplace = True ) embeds_array = df . to_numpy () embedding_data = { elements [ i ]: embeds_array [ i ] for i in range ( len ( embeds_array )) } elif embedding_json == \"megnet16\" : megnet16_json = path . join ( data_directory , _cbfv_files [ \"megnet16\" ]) with open ( megnet16_json , \"r\" ) as f : embedding_data = json . load ( f ) # Remove 'Null' key from megnet embedding del embedding_data [ \"Null\" ] elif embedding_json in _cbfv_names_others : _json = path . join ( data_directory , _cbfv_files [ embedding_json ]) with open ( _json , \"r\" ) as f : embedding_data = json . load ( f ) # Load a json file from a file specified in the input else : with open ( embedding_json , \"r\" ) as f : embedding_data = json . load ( f ) else : raise ( ValueError ( f \" { embedding_json } not in the data directory or not in directory.\" ) ) return Atomic_Embeddings ( embedding_data ) @property def element_list ( self ): \"\"\"Returns the elements of the atomic embedding.\"\"\" return list ( self . embeddings . keys ()) @property def element_groups_dict ( self ): \"\"\"Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'}\"\"\" with open ( path . join ( data_directory , \"element_data/element_group.json\" )) as f : _dict = json . load ( f ) return { i : _dict [ i ] for i in self . element_list } def create_pairs ( self ): \"\"\"Creates all possible pairs of elements\"\"\" ele_list = self . element_list ele_pairs = combinations_with_replacement ( ele_list , 2 ) return ele_pairs def create_correlation_df ( self ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics\"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : pearson = pearsonr ( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) dist = norm ( self . embeddings [ ele1 ] - self . embeddings [ ele2 ]) recip_dist = dist **- 1 table . append (( ele1 , ele2 , pearson [ 0 ], dist , recip_dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , pearson [ 0 ], dist , recip_dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , \"pearson_corr\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , ], ) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [ [ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , \"pearson_corr\" , ] ] return corr_df def compute_distance_metric ( self , ele1 , ele2 , metric = \"euclidean\" ): \"\"\"Computes distance metric between two vectors. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: ele1 (str): element symbol ele2 (str): element symbol metric (str): name of a distance metric Returns: distance (float): distance between embedding vectors \"\"\" # Define the allowable metrics scikit_metrics = [ \"euclidean\" , \"manhattan\" , \"chebyshev\" ] scipy_metrics = { \"wasserstein\" : wasserstein_distance , \"energy\" : energy_distance } valid_metrics = scikit_metrics + list ( scipy_metrics . keys ()) # Validate if the elements are within the embedding vector if ele1 not in self . element_list : print ( \"ele1 is not an element included within the atomic embeddings\" ) raise ValueError if ele2 not in self . element_list : print ( \"ele2 is not an element included within the atomic embeddings\" ) raise ValueError # Compute the distance measure if metric in scikit_metrics : distance = DistanceMetric . get_metric ( metric ) return distance . pairwise ( self . embeddings [ ele1 ] . reshape ( 1 , - 1 ), self . embeddings [ ele2 ] . reshape ( 1 , - 1 ), )[ 0 ][ 0 ] elif metric in scipy_metrics . keys (): return scipy_metrics [ metric ]( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) else : print ( f \"Invalid distance metric. Use one of the following metrics: { valid_metrics } \" ) raise ValueError def create_pearson_pivot_table ( self ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics\"\"\" corr_df = self . create_correlation_df () pearson_pivot = corr_df . pivot_table ( values = \"pearson_corr\" , index = \"mend_1\" , columns = \"mend_2\" ) return pearson_pivot def create_distance_correlation_df ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: metric (str): A distance metric Returns: df (pandas.DataFrame): A dataframe with columns [\"ele_1\", \"ele_2\", metric] \"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : dist = self . compute_distance_metric ( ele1 , ele2 , metric = metric ) table . append (( ele1 , ele2 , dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , metric ]) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [[ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , metric ]] return corr_df def create_distance_pivot_table ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Args: metric (str): A distance metric Returns: distance_pivot (pandas.DataFrame): A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. \"\"\" corr_df = self . create_distance_correlation_df ( metric = metric ) distance_pivot = corr_df . pivot_table ( values = metric , index = \"mend_1\" , columns = \"mend_2\" ) return distance_pivot def plot_pearson_correlation ( self , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pearson correlation values for the elemental representation. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object **kwargs: Other keyword arguments to be passed to sns.heatmap Returns: ax (matplotlib Axes): An Axes object with the heatmap \"\"\" pearson_pivot = self . create_pearson_pivot_table () plt . figure ( figsize = figsize ) ax = sns . heatmap ( pearson_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax def plot_distance_correlation ( self , metric = \"euclidean\" , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pairwise distance metrics for the elemental representation. Args: metric (str): A valid distance metric figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object Returns: ax (matplotlib.axes.Axes): An Axes object with the heatmap \"\"\" distance_pivot = self . create_distance_pivot_table ( metric = metric ) plt . figure ( figsize = figsize ) ax = sns . heatmap ( distance_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax def plot_PCA_2D ( self , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs ): \"\"\"A function to plot a PCA plot of the atomic embedding. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) fig = plt . figure ( figsize = figsize ) plt . cla () # clear current axes pca = decomposition . PCA ( n_components = 2 ) # project to 2 dimensions pca . fit ( embeddings_array ) X = pca . transform ( embeddings_array ) pca_dim1 = X [:, 0 ] pca_dim2 = X [:, 1 ] # Create a dataframe to store the dimensions, labels and group info for the PCA pca_df = pd . DataFrame ( { \"pca_dim1\" : pca_dim1 , \"pca_dim2\" : pca_dim2 , \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) ax = sns . scatterplot ( x = \"pca_dim1\" , y = \"pca_dim2\" , data = pca_df , hue = points_hue , s = points_size , ** kwargs , ) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) for i in range ( len ( X )): plt . text ( x = pca_dim1 [ i ], y = pca_dim2 [ i ], s = element_array [ i ]) return plt def plot_tSNE ( self , n_components = 2 , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs , ): \"\"\"A function to plot a t-SNE plot of the atomic embedding Args: n_components (int): Number of t-SNE components to plot. figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) tsne = TSNE ( n_components ) tsne_result = tsne . fit_transform ( embeddings_array ) # Create a dataframe to store the dimension and the label for t-SNE transformation tsne_df = pd . DataFrame ( { \"tsne_dim1\" : tsne_result [:, 0 ], \"tsne_dim2\" : tsne_result [:, 1 ], \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) # Create the t-SNE plot fig , ax = plt . subplots ( figsize = figsize ) sns . scatterplot ( x = \"tsne_dim1\" , y = \"tsne_dim2\" , data = tsne_df , hue = points_hue , s = points_size , ax = ax , ) # lim = (tsne_result.min()-5, tsne_result.max()+5) # ax.set_xlim(lim) # ax.set_ylim(lim) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) # Label the points for i in range ( tsne_df . shape [ 0 ]): plt . text ( x = tsne_df [ \"tsne_dim1\" ][ i ], y = tsne_df [ \"tsne_dim2\" ][ i ], s = tsne_df [ \"element\" ][ i ], ) return plt","title":"Atomic_Embeddings"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.compute_distance_metric","text":"Computes distance metric between two vectors. Allowed metrics: euclidean manhattan chebyshev wasserstein energy Parameters: Name Type Description Default ele1 str element symbol required ele2 str element symbol required metric str name of a distance metric 'euclidean' Returns: Name Type Description distance float distance between embedding vectors Source code in AtomicEmbeddings/AtomicEmbeddings.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 def compute_distance_metric ( self , ele1 , ele2 , metric = \"euclidean\" ): \"\"\"Computes distance metric between two vectors. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: ele1 (str): element symbol ele2 (str): element symbol metric (str): name of a distance metric Returns: distance (float): distance between embedding vectors \"\"\" # Define the allowable metrics scikit_metrics = [ \"euclidean\" , \"manhattan\" , \"chebyshev\" ] scipy_metrics = { \"wasserstein\" : wasserstein_distance , \"energy\" : energy_distance } valid_metrics = scikit_metrics + list ( scipy_metrics . keys ()) # Validate if the elements are within the embedding vector if ele1 not in self . element_list : print ( \"ele1 is not an element included within the atomic embeddings\" ) raise ValueError if ele2 not in self . element_list : print ( \"ele2 is not an element included within the atomic embeddings\" ) raise ValueError # Compute the distance measure if metric in scikit_metrics : distance = DistanceMetric . get_metric ( metric ) return distance . pairwise ( self . embeddings [ ele1 ] . reshape ( 1 , - 1 ), self . embeddings [ ele2 ] . reshape ( 1 , - 1 ), )[ 0 ][ 0 ] elif metric in scipy_metrics . keys (): return scipy_metrics [ metric ]( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) else : print ( f \"Invalid distance metric. Use one of the following metrics: { valid_metrics } \" ) raise ValueError","title":"compute_distance_metric()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.create_correlation_df","text":"Returns a pandas.DataFrame object with columns of the elements and correlation metrics Source code in AtomicEmbeddings/AtomicEmbeddings.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 def create_correlation_df ( self ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics\"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : pearson = pearsonr ( self . embeddings [ ele1 ], self . embeddings [ ele2 ]) dist = norm ( self . embeddings [ ele1 ] - self . embeddings [ ele2 ]) recip_dist = dist **- 1 table . append (( ele1 , ele2 , pearson [ 0 ], dist , recip_dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , pearson [ 0 ], dist , recip_dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , \"pearson_corr\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , ], ) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [ [ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , \"euclid_dist\" , \"reciprocal_euclid_dist\" , \"pearson_corr\" , ] ] return corr_df","title":"create_correlation_df()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.create_distance_correlation_df","text":"Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: euclidean manhattan chebyshev wasserstein energy Parameters: Name Type Description Default metric str A distance metric 'euclidean' Returns: Name Type Description df pandas . DataFrame A dataframe with columns [\"ele_1\", \"ele_2\", metric] Source code in AtomicEmbeddings/AtomicEmbeddings.py 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 def create_distance_correlation_df ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame object with columns of the elements and correlation metrics. Allowed metrics: * euclidean * manhattan * chebyshev * wasserstein * energy Args: metric (str): A distance metric Returns: df (pandas.DataFrame): A dataframe with columns [\"ele_1\", \"ele_2\", metric] \"\"\" ele_pairs = self . create_pairs () table = [] for ele1 , ele2 in ele_pairs : dist = self . compute_distance_metric ( ele1 , ele2 , metric = metric ) table . append (( ele1 , ele2 , dist )) if ele1 != ele2 : table . append (( ele2 , ele1 , dist )) corr_df = pd . DataFrame ( table , columns = [ \"ele_1\" , \"ele_2\" , metric ]) mend_1 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_1\" ]] mend_2 = [( Element ( ele ) . mendeleev_no , ele ) for ele in corr_df [ \"ele_2\" ]] corr_df [ \"mend_1\" ] = mend_1 corr_df [ \"mend_2\" ] = mend_2 corr_df = corr_df [[ \"ele_1\" , \"ele_2\" , \"mend_1\" , \"mend_2\" , metric ]] return corr_df","title":"create_distance_correlation_df()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.create_distance_pivot_table","text":"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Parameters: Name Type Description Default metric str A distance metric 'euclidean' Returns: Name Type Description distance_pivot pandas . DataFrame A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. Source code in AtomicEmbeddings/AtomicEmbeddings.py 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 def create_distance_pivot_table ( self , metric = \"euclidean\" ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being a user-specified distance metric Args: metric (str): A distance metric Returns: distance_pivot (pandas.DataFrame): A pandas DataFrame pivot table where the index and columns are the elements and the values are the pairwise distance metric. \"\"\" corr_df = self . create_distance_correlation_df ( metric = metric ) distance_pivot = corr_df . pivot_table ( values = metric , index = \"mend_1\" , columns = \"mend_2\" ) return distance_pivot","title":"create_distance_pivot_table()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.create_pairs","text":"Creates all possible pairs of elements Source code in AtomicEmbeddings/AtomicEmbeddings.py 154 155 156 157 158 def create_pairs ( self ): \"\"\"Creates all possible pairs of elements\"\"\" ele_list = self . element_list ele_pairs = combinations_with_replacement ( ele_list , 2 ) return ele_pairs","title":"create_pairs()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.create_pearson_pivot_table","text":"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics Source code in AtomicEmbeddings/AtomicEmbeddings.py 258 259 260 261 262 263 264 265 def create_pearson_pivot_table ( self ): \"\"\"Returns a pandas.DataFrame style pivot with the index and column being the mendeleev number of the element pairs and the values being the pearson correlation metrics\"\"\" corr_df = self . create_correlation_df () pearson_pivot = corr_df . pivot_table ( values = \"pearson_corr\" , index = \"mend_1\" , columns = \"mend_2\" ) return pearson_pivot","title":"create_pearson_pivot_table()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.element_groups_dict","text":"Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'} Source code in AtomicEmbeddings/AtomicEmbeddings.py 146 147 148 149 150 151 152 @property def element_groups_dict ( self ): \"\"\"Returns a dictionary of {element: element type} pairs e.g. {'He':'Noble gas'}\"\"\" with open ( path . join ( data_directory , \"element_data/element_group.json\" )) as f : _dict = json . load ( f ) return { i : _dict [ i ] for i in self . element_list }","title":"element_groups_dict()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.element_list","text":"Returns the elements of the atomic embedding. Source code in AtomicEmbeddings/AtomicEmbeddings.py 141 142 143 144 @property def element_list ( self ): \"\"\"Returns the elements of the atomic embedding.\"\"\" return list ( self . embeddings . keys ())","title":"element_list()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.from_json","text":"Creates an instance of the Atomic_Embeddings class from a default embedding file. The default embeddings are in the table below: Name str_name Magpie magpie Magpie (scaled) magpie_sc Mat2Vec mat2vec Matscholar matscholar Megnet (16 dimensions) megnet16 Modified pettifor scale mod_petti Oliynyk oliynyk Oliynyk (scaled) oliynyk_sc Random (200 dimensions) random_200 SkipAtom skipatom Parameters: Name Type Description Default embedding_json str JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. None Returns: Name Type Description Atomic_Embedding class: Atomic_Embeddings instance. Source code in AtomicEmbeddings/AtomicEmbeddings.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 @staticmethod def from_json ( embedding_json : Optional [ str ] = None ): \"\"\"Creates an instance of the `Atomic_Embeddings` class from a default embedding file. The default embeddings are in the table below: | **Name** | **str_name** | |-------------------------|--------------| | Magpie | magpie | | Magpie (scaled) | magpie_sc | | Mat2Vec | mat2vec | | Matscholar | matscholar | | Megnet (16 dimensions) | megnet16 | | Modified pettifor scale | mod_petti | | Oliynyk | oliynyk | | Oliynyk (scaled) | oliynyk_sc | | Random (200 dimensions) | random_200 | | SkipAtom | skipatom | Args: embedding_json (str): JSON-style representation of a set of atomic embedding vectors. This is a python dictionary of element:embedding vector pairs. Returns: Atomic_Embedding :class:`Atomic_Embeddings` instance.\"\"\" _cbfv_files = { \"magpie\" : \"magpie.json\" , \"magpie_sc\" : \"magpie_sc.json\" , \"mat2vec\" : \"mat2vec.json\" , \"matscholar\" : \"matscholar-embedding.json\" , \"megnet16\" : \"megnet16.json\" , \"mod_petti\" : \"mod_petti.json\" , \"oliynyk\" : \"oliynyk.json\" , \"oliynyk_sc\" : \"oliynyk_sc.json\" , \"random_200\" : \"random_200.csv\" , \"skipatom\" : \"skipatom_20201009_induced.csv\" , } _cbfv_names = list ( _cbfv_files . keys ()) _cbfv_names_others = [ i for i in _cbfv_names if i not in [ \"skipatom\" , \"random_200\" , \"megnet16\" ] ] # Get the embeddings if embedding_json in _cbfv_files : if embedding_json == \"skipatom\" or embedding_json == \"random_200\" : _csv = path . join ( data_directory , _cbfv_files [ embedding_json ]) df = pd . read_csv ( _csv ) # Convert df to a dictionary of (ele:embeddings) pairs elements = list ( df [ \"element\" ]) df . drop ([ \"element\" ], axis = 1 , inplace = True ) embeds_array = df . to_numpy () embedding_data = { elements [ i ]: embeds_array [ i ] for i in range ( len ( embeds_array )) } elif embedding_json == \"megnet16\" : megnet16_json = path . join ( data_directory , _cbfv_files [ \"megnet16\" ]) with open ( megnet16_json , \"r\" ) as f : embedding_data = json . load ( f ) # Remove 'Null' key from megnet embedding del embedding_data [ \"Null\" ] elif embedding_json in _cbfv_names_others : _json = path . join ( data_directory , _cbfv_files [ embedding_json ]) with open ( _json , \"r\" ) as f : embedding_data = json . load ( f ) # Load a json file from a file specified in the input else : with open ( embedding_json , \"r\" ) as f : embedding_data = json . load ( f ) else : raise ( ValueError ( f \" { embedding_json } not in the data directory or not in directory.\" ) ) return Atomic_Embeddings ( embedding_data )","title":"from_json()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.plot_PCA_2D","text":"A function to plot a PCA plot of the atomic embedding. Parameters: Name Type Description Default figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (16, 12) points_size float The marker size 200 Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the PCA plot Source code in AtomicEmbeddings/AtomicEmbeddings.py 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 def plot_PCA_2D ( self , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs ): \"\"\"A function to plot a PCA plot of the atomic embedding. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) fig = plt . figure ( figsize = figsize ) plt . cla () # clear current axes pca = decomposition . PCA ( n_components = 2 ) # project to 2 dimensions pca . fit ( embeddings_array ) X = pca . transform ( embeddings_array ) pca_dim1 = X [:, 0 ] pca_dim2 = X [:, 1 ] # Create a dataframe to store the dimensions, labels and group info for the PCA pca_df = pd . DataFrame ( { \"pca_dim1\" : pca_dim1 , \"pca_dim2\" : pca_dim2 , \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) ax = sns . scatterplot ( x = \"pca_dim1\" , y = \"pca_dim2\" , data = pca_df , hue = points_hue , s = points_size , ** kwargs , ) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) for i in range ( len ( X )): plt . text ( x = pca_dim1 [ i ], y = pca_dim2 [ i ], s = element_array [ i ]) return plt","title":"plot_PCA_2D()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.plot_distance_correlation","text":"Plots the heatmap of the pairwise distance metrics for the elemental representation. Parameters: Name Type Description Default metric str A valid distance metric 'euclidean' figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (24, 24) Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the heatmap Source code in AtomicEmbeddings/AtomicEmbeddings.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 def plot_distance_correlation ( self , metric = \"euclidean\" , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pairwise distance metrics for the elemental representation. Args: metric (str): A valid distance metric figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object Returns: ax (matplotlib.axes.Axes): An Axes object with the heatmap \"\"\" distance_pivot = self . create_distance_pivot_table ( metric = metric ) plt . figure ( figsize = figsize ) ax = sns . heatmap ( distance_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax","title":"plot_distance_correlation()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.plot_pearson_correlation","text":"Plots the heatmap of the pearson correlation values for the elemental representation. Parameters: Name Type Description Default figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (24, 24) **kwargs Other keyword arguments to be passed to sns.heatmap {} Returns: Name Type Description ax matplotlib Axes An Axes object with the heatmap Source code in AtomicEmbeddings/AtomicEmbeddings.py 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 def plot_pearson_correlation ( self , figsize = ( 24 , 24 ), ** kwargs ): \"\"\" Plots the heatmap of the pearson correlation values for the elemental representation. Args: figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object **kwargs: Other keyword arguments to be passed to sns.heatmap Returns: ax (matplotlib Axes): An Axes object with the heatmap \"\"\" pearson_pivot = self . create_pearson_pivot_table () plt . figure ( figsize = figsize ) ax = sns . heatmap ( pearson_pivot , cmap = \"bwr\" , square = True , linecolor = \"k\" , ** kwargs ) return ax","title":"plot_pearson_correlation()"},{"location":"python_api/#AtomicEmbeddings.AtomicEmbeddings.Atomic_Embeddings.plot_tSNE","text":"A function to plot a t-SNE plot of the atomic embedding Parameters: Name Type Description Default n_components int Number of t-SNE components to plot. 2 figsize tuple A tuple of (width, height) to pass to the matplotlib.pyplot.figure object (16, 12) points_size float The marker size 200 Returns: Name Type Description ax matplotlib . axes . Axes An Axes object with the PCA plot Source code in AtomicEmbeddings/AtomicEmbeddings.py 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 def plot_tSNE ( self , n_components = 2 , figsize = ( 16 , 12 ), points_hue = \"group\" , points_size = 200 , ** kwargs , ): \"\"\"A function to plot a t-SNE plot of the atomic embedding Args: n_components (int): Number of t-SNE components to plot. figsize (tuple): A tuple of (width, height) to pass to the matplotlib.pyplot.figure object points_size (float): The marker size Returns: ax (matplotlib.axes.Axes): An Axes object with the PCA plot \"\"\" embeddings_array = np . array ( list ( self . embeddings . values ())) element_array = np . array ( self . element_list ) tsne = TSNE ( n_components ) tsne_result = tsne . fit_transform ( embeddings_array ) # Create a dataframe to store the dimension and the label for t-SNE transformation tsne_df = pd . DataFrame ( { \"tsne_dim1\" : tsne_result [:, 0 ], \"tsne_dim2\" : tsne_result [:, 1 ], \"element\" : element_array , \"group\" : list ( self . element_groups_dict . values ()), } ) # Create the t-SNE plot fig , ax = plt . subplots ( figsize = figsize ) sns . scatterplot ( x = \"tsne_dim1\" , y = \"tsne_dim2\" , data = tsne_df , hue = points_hue , s = points_size , ax = ax , ) # lim = (tsne_result.min()-5, tsne_result.max()+5) # ax.set_xlim(lim) # ax.set_ylim(lim) plt . xlabel ( \"Dimension 1\" ) plt . ylabel ( \"Dimension 2\" ) # Label the points for i in range ( tsne_df . shape [ 0 ]): plt . text ( x = tsne_df [ \"tsne_dim1\" ][ i ], y = tsne_df [ \"tsne_dim2\" ][ i ], s = tsne_df [ \"element\" ][ i ], ) return plt","title":"plot_tSNE()"},{"location":"reference/","text":"Elemental Embeddings Below, you can find descriptions and references for the element embeddings that are available within this work. Magpie The following paper describes the details of the Materials Agnostic Platform for Informatics and Exploration (Magpie) framework: A general-purpose machine learning framework for predicting properties of inorganic materials The source code for Magpie can be found here The 21 dimensional embedding vector includes the following elemental properties: Click to see the 21 properties * Mendeleev number * Atomic weight * Melting temperature; * Group number; * Period; * Covalent Radius; * Electronegativity; * no. of s, p, d, f valence electrons (4 features); * no. of valence electrons; * no. of unfilled: s, p, d, f orbitals (4 features), * no. of unfilled orbtials * GSvolume_pa (DFT volume per atom of T=0K ground state from the OQMD) * GSbandgap(DFT bandgap energy of T=0K ground state from the OQMD) * GSmagmom (DFT magnetic moment of T=0K ground state from the OQMD) * Space Group Number magpie_sc is scaled version of the magpie embeddings mat2vec The following paper describes the implementation of mat2vec: Unsupervised word embeddings capture latent knowledge from materials science literature MatScholar The following paper describes the natural language processing implementation of Materials Scholar (matscholar): Named Entity Recognition and Normalization Applied to Large-Scale Information Extraction from the Materials Science Literature MEGnet The following paper describes the details of the construction of the MatErials Graph Network (MEGNet): Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals Modified Pettifor scale The following paper describes the details of the modified Pettifor chemical scale: The optimal one dimensional periodic table: a modified Pettifor chemical scale from data mining Oliynkyk The following paper describes the details: High-Throughput Machine-Learning-Driven Synthesis of Full-Heusler Compounds The 44 features of the embedding vector are formed of the following properties: Click to see the 44 features! * Number * Atomic_Weight * Period * Group * Families * Metal * Nonmetal * Metalliod * Mendeleev_Number * l_quantum_number * Atomic_Radius * Miracle_Radius_[pm] * Covalent_Radius * Zunger_radii_sum * Ionic_radius * crystal_radius * Pauling_Electronegativity * MB_electonegativity * Gordy_electonegativity * Mulliken_EN * Allred-Rockow_electronegativity * Metallic_valence * Number_of_valence_electrons * Gilmor_number_of_valence_electron * valence_s * valence_p * valence_d * valence_f * Number_of_unfilled_s_valence_electrons * Number_of_unfilled_p_valence_electrons * Number_of_unfilled_d_valence_electrons * Number_of_unfilled_f_valence_electrons * Outer_shell_electrons * 1st_ionization_potential_(kJ/mol) * Polarizability(A^3) * Melting_point_(K) * Boiling_Point_(K) * Density_(g/mL) * Specific_heat_(J/g_K)_ * Heat_of_fusion_(kJ/mol)_ * Heat_of_vaporization_(kJ/mol)_ * Thermal_conductivity_(W/(m_K))_ * Heat_atomization(kJ/mol) * Cohesive_energy oliynyk_sc is scaled version of the oliynyk embeddings Random This is a set of 200-dimensional vectors in which the components are randomly generated SkipAtom The following paper describes the details: Distributed representations of atoms and materials for machine learning","title":"Reference"},{"location":"reference/#elemental-embeddings","text":"Below, you can find descriptions and references for the element embeddings that are available within this work.","title":"Elemental Embeddings"},{"location":"reference/#magpie","text":"The following paper describes the details of the Materials Agnostic Platform for Informatics and Exploration (Magpie) framework: A general-purpose machine learning framework for predicting properties of inorganic materials The source code for Magpie can be found here The 21 dimensional embedding vector includes the following elemental properties: Click to see the 21 properties * Mendeleev number * Atomic weight * Melting temperature; * Group number; * Period; * Covalent Radius; * Electronegativity; * no. of s, p, d, f valence electrons (4 features); * no. of valence electrons; * no. of unfilled: s, p, d, f orbitals (4 features), * no. of unfilled orbtials * GSvolume_pa (DFT volume per atom of T=0K ground state from the OQMD) * GSbandgap(DFT bandgap energy of T=0K ground state from the OQMD) * GSmagmom (DFT magnetic moment of T=0K ground state from the OQMD) * Space Group Number magpie_sc is scaled version of the magpie embeddings","title":"Magpie"},{"location":"reference/#mat2vec","text":"The following paper describes the implementation of mat2vec: Unsupervised word embeddings capture latent knowledge from materials science literature","title":"mat2vec"},{"location":"reference/#matscholar","text":"The following paper describes the natural language processing implementation of Materials Scholar (matscholar): Named Entity Recognition and Normalization Applied to Large-Scale Information Extraction from the Materials Science Literature","title":"MatScholar"},{"location":"reference/#megnet","text":"The following paper describes the details of the construction of the MatErials Graph Network (MEGNet): Graph Networks as a Universal Machine Learning Framework for Molecules and Crystals","title":"MEGnet"},{"location":"reference/#modified-pettifor-scale","text":"The following paper describes the details of the modified Pettifor chemical scale: The optimal one dimensional periodic table: a modified Pettifor chemical scale from data mining","title":"Modified Pettifor scale"},{"location":"reference/#oliynkyk","text":"The following paper describes the details: High-Throughput Machine-Learning-Driven Synthesis of Full-Heusler Compounds The 44 features of the embedding vector are formed of the following properties: Click to see the 44 features! * Number * Atomic_Weight * Period * Group * Families * Metal * Nonmetal * Metalliod * Mendeleev_Number * l_quantum_number * Atomic_Radius * Miracle_Radius_[pm] * Covalent_Radius * Zunger_radii_sum * Ionic_radius * crystal_radius * Pauling_Electronegativity * MB_electonegativity * Gordy_electonegativity * Mulliken_EN * Allred-Rockow_electronegativity * Metallic_valence * Number_of_valence_electrons * Gilmor_number_of_valence_electron * valence_s * valence_p * valence_d * valence_f * Number_of_unfilled_s_valence_electrons * Number_of_unfilled_p_valence_electrons * Number_of_unfilled_d_valence_electrons * Number_of_unfilled_f_valence_electrons * Outer_shell_electrons * 1st_ionization_potential_(kJ/mol) * Polarizability(A^3) * Melting_point_(K) * Boiling_Point_(K) * Density_(g/mL) * Specific_heat_(J/g_K)_ * Heat_of_fusion_(kJ/mol)_ * Heat_of_vaporization_(kJ/mol)_ * Thermal_conductivity_(W/(m_K))_ * Heat_atomization(kJ/mol) * Cohesive_energy oliynyk_sc is scaled version of the oliynyk embeddings","title":"Oliynkyk"},{"location":"reference/#random","text":"This is a set of 200-dimensional vectors in which the components are randomly generated","title":"Random"},{"location":"reference/#skipatom","text":"The following paper describes the details: Distributed representations of atoms and materials for machine learning","title":"SkipAtom"},{"location":"tutorials/","text":"Here we will demonstrate how to use some of AtomicEmbeddings 's features. For full worked examples of using the package, please refer to the Jupyter notebooks in the examples section of the Github repo . Atomic_Embeddings The Atomic_Embeddings class lies at the heart of the package. It handles elemental representation data and enables analysis and visualisation. from AtomicEmbeddings import Atomic_Embeddings # Load the magpie data magpie = Atomic_Embeddings . from_json ( 'magpie' ) # Print out some of the properties of the Atomic_Embeddings class # Print the dimensions of the embedding print ( f 'The magpie representation has embeddings of dimension { magpie . dim } \\n ' ) print ( magpie . element_list ) # prints out all the elements considered for this representation The magpie representation has embeddings of dimension 21 [ 'H' , 'He' , 'Li' , 'Be' , 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne' , 'Na' , 'Mg' , 'Al' , 'Si' , 'P' , 'S' , 'Cl' , 'Ar' , 'K' , 'Ca' , 'Sc' , 'Ti' , 'V' , 'Cr' , 'Mn' , 'Fe' , 'Co' , 'Ni' , 'Cu' , 'Zn' , 'Ga' , 'Ge' , 'As' , 'Se' , 'Br' , 'Kr' , 'Rb' , 'Sr' , 'Y' , 'Zr' , 'Nb' , 'Mo' , 'Tc' , 'Ru' , 'Rh' , 'Pd' , 'Ag' , 'Cd' , 'In' , 'Sn' , 'Sb' , 'Te' , 'I' , 'Xe' , 'Cs' , 'Ba' , 'La' , 'Ce' , 'Pr' , 'Nd' , 'Pm' , 'Sm' , 'Eu' , 'Gd' , 'Tb' , 'Dy' , 'Ho' , 'Er' , 'Tm' , 'Yb' , 'Lu' , 'Hf' , 'Ta' , 'W' , 'Re' , 'Os' , 'Ir' , 'Pt' , 'Au' , 'Hg' , 'Tl' , 'Pb' , 'Bi' , 'Po' , 'At' , 'Rn' , 'Fr' , 'Ra' , 'Ac' , 'Th' , 'Pa' , 'U' , 'Np' , 'Pu' , 'Am' , 'Cm' , 'Bk' ]","title":"Tutorial"},{"location":"tutorials/#atomic_embeddings","text":"The Atomic_Embeddings class lies at the heart of the package. It handles elemental representation data and enables analysis and visualisation. from AtomicEmbeddings import Atomic_Embeddings # Load the magpie data magpie = Atomic_Embeddings . from_json ( 'magpie' ) # Print out some of the properties of the Atomic_Embeddings class # Print the dimensions of the embedding print ( f 'The magpie representation has embeddings of dimension { magpie . dim } \\n ' ) print ( magpie . element_list ) # prints out all the elements considered for this representation The magpie representation has embeddings of dimension 21 [ 'H' , 'He' , 'Li' , 'Be' , 'B' , 'C' , 'N' , 'O' , 'F' , 'Ne' , 'Na' , 'Mg' , 'Al' , 'Si' , 'P' , 'S' , 'Cl' , 'Ar' , 'K' , 'Ca' , 'Sc' , 'Ti' , 'V' , 'Cr' , 'Mn' , 'Fe' , 'Co' , 'Ni' , 'Cu' , 'Zn' , 'Ga' , 'Ge' , 'As' , 'Se' , 'Br' , 'Kr' , 'Rb' , 'Sr' , 'Y' , 'Zr' , 'Nb' , 'Mo' , 'Tc' , 'Ru' , 'Rh' , 'Pd' , 'Ag' , 'Cd' , 'In' , 'Sn' , 'Sb' , 'Te' , 'I' , 'Xe' , 'Cs' , 'Ba' , 'La' , 'Ce' , 'Pr' , 'Nd' , 'Pm' , 'Sm' , 'Eu' , 'Gd' , 'Tb' , 'Dy' , 'Ho' , 'Er' , 'Tm' , 'Yb' , 'Lu' , 'Hf' , 'Ta' , 'W' , 'Re' , 'Os' , 'Ir' , 'Pt' , 'Au' , 'Hg' , 'Tl' , 'Pb' , 'Bi' , 'Po' , 'At' , 'Rn' , 'Fr' , 'Ra' , 'Ac' , 'Th' , 'Pa' , 'U' , 'Np' , 'Pu' , 'Am' , 'Cm' , 'Bk' ]","title":"Atomic_Embeddings"}]}